{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Husametdin\\\\kocaoglu\\\\fe\\\\src\\\\admin\\\\shared\\\\ApiProgress.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDisplayName = WrappedComponent => {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n};\n\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === apiPath) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.requestInterceptor = axios.interceptors.request.use(request => {\n        this.updateApiCallFor(request.url, true);\n        return request;\n      });\n      this.responseInterceptor = axios.interceptors.response.use(response => {\n        this.updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        this.updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    }\n\n    componentWillUnmount() {\n      axios.interceptors.request.eject(this.requestInterceptor);\n      axios.interceptors.response.eject(this.responseInterceptor);\n    }\n\n    render() {\n      const {\n        pendingApiCall\n      } = this.state; // return <div>{React.cloneElement(this.props.children, { pendingApiCall })}</div>;\n\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        pendingApiCall: pendingApiCall,\n        ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }, this);\n    }\n\n  }, _class.displayName = `ApiProgres(${getDisplayName(WrappedComponent)})`, _temp;\n}","map":{"version":3,"sources":["D:/Users/Husametdin/kocaoglu/fe/src/admin/shared/ApiProgress.js"],"names":["React","Component","axios","getDisplayName","WrappedComponent","displayName","name","withApiProgress","apiPath","state","pendingApiCall","updateApiCallFor","url","inProgress","setState","componentDidMount","requestInterceptor","interceptors","request","use","responseInterceptor","response","config","error","componentWillUnmount","eject","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,cAAc,GAAGC,gBAAD,IAAsB;AAC1C,SAAOA,gBAAgB,CAACC,WAAjB,IAAgCD,gBAAgB,CAACE,IAAjD,IAAyD,WAAhE;AACD,CAFD;;AAIA,OAAO,SAASC,eAAT,CAAyBH,gBAAzB,EAA0CI,OAA1C,EAAmD;AAAA;;AACtD,0BAAO,cAAgBP,SAAhB,CAA0B;AAAA;AAAA;AAAA,WAG/BQ,KAH+B,GAGvB;AACNC,QAAAA,cAAc,EAAE;AADV,OAHuB;;AAAA,WA8B/BC,gBA9B+B,GA8BZ,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtC,YAAID,GAAG,KAAKJ,OAAZ,EAAqB;AACnB,eAAKM,QAAL,CAAc;AAAEJ,YAAAA,cAAc,EAAEG;AAAlB,WAAd;AACD;AACF,OAlC8B;AAAA;;AAS/BE,IAAAA,iBAAiB,GAAG;AACnB,WAAKC,kBAAL,GAAyBd,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BD,OAAO,IAAI;AAChE,aAAKP,gBAAL,CAAsBO,OAAO,CAACN,GAA9B,EAAmC,IAAnC;AACA,eAAOM,OAAP;AACD,OAHuB,CAAzB;AAKC,WAAKE,mBAAL,GAA2BlB,KAAK,CAACe,YAAN,CAAmBI,QAAnB,CAA4BF,GAA5B,CACzBE,QAAQ,IAAI;AACV,aAAKV,gBAAL,CAAsBU,QAAQ,CAACC,MAAT,CAAgBV,GAAtC,EAA2C,KAA3C;AACA,eAAOS,QAAP;AACD,OAJwB,EAKzBE,KAAK,IAAI;AACP,aAAKZ,gBAAL,CAAsBY,KAAK,CAACD,MAAN,CAAaV,GAAnC,EAAwC,KAAxC;AACA,cAAMW,KAAN;AACD,OARwB,CAA3B;AAUD;;AACDC,IAAAA,oBAAoB,GAAE;AACpBtB,MAAAA,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiC,KAAKT,kBAAtC;AACAd,MAAAA,KAAK,CAACe,YAAN,CAAmBI,QAAnB,CAA4BI,KAA5B,CAAkC,KAAKL,mBAAvC;AACD;;AAODM,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEhB,QAAAA;AAAF,UAAqB,KAAKD,KAAhC,CADO,CAEP;;AACA,0BAAO,QAAC,gBAAD;AAAkB,QAAA,cAAc,EAAEC,cAAlC;AAAA,WAAsD,KAAKiB;AAA3D;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAxC8B,GAAjC,SACUtB,WADV,GACwB,cAAaF,cAAc,CAACC,gBAAD,CAAmB,GADtE;AA0CH","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst getDisplayName =(WrappedComponent) => {\r\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\r\n}\r\n\r\nexport function withApiProgress(WrappedComponent,apiPath) {\r\n    return class   extends Component {\r\n       static displayName= `ApiProgres(${getDisplayName(WrappedComponent)})`;\r\n\r\n      state = {\r\n        pendingApiCall: false\r\n      };\r\n    \r\n      \r\n      \r\n      componentDidMount() {\r\n       this.requestInterceptor= axios.interceptors.request.use(request => { \r\n          this.updateApiCallFor(request.url, true); \r\n          return request;\r\n        });\r\n    \r\n        this.responseInterceptor = axios.interceptors.response.use(\r\n          response => {\r\n            this.updateApiCallFor(response.config.url, false);\r\n            return response;\r\n          },\r\n          error => {\r\n            this.updateApiCallFor(error.config.url, false);\r\n            throw error;\r\n          }\r\n        );\r\n      }\r\n      componentWillUnmount(){\r\n        axios.interceptors.request.eject(this.requestInterceptor);\r\n        axios.interceptors.response.eject(this.responseInterceptor);\r\n      }\r\n      updateApiCallFor = (url, inProgress) => {\r\n        if (url === apiPath) {\r\n          this.setState({ pendingApiCall: inProgress });\r\n        }\r\n      };\r\n    \r\n      render() {\r\n        const { pendingApiCall } = this.state;\r\n        // return <div>{React.cloneElement(this.props.children, { pendingApiCall })}</div>;\r\n        return <WrappedComponent pendingApiCall={pendingApiCall} {...this.props} />\r\n      }\r\n    }\r\n}\r\n "]},"metadata":{},"sourceType":"module"}